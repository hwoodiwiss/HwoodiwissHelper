@using HwoodiwissHelper.Core
@using HwoodiwissHelper.Core.Extensions
@using HwoodiwissHelper.Core.Features.GitHub
@using HwoodiwissHelper.UI.Features.GitHubForkCleaner.HttpClients
@using HwoodiwissHelper.UI.Features.GitHubForkCleaner.Models
@inject GitHubClient GitHubClient
@inject IJSRuntime JsRuntime

<h3>GitHubForkList</h3>

<p>Hey @User?.Login.</p>

@if (Forks is not null)
{
    @foreach (var fork in Forks!)
    {
        <div>
            <p>@fork.FullName</p>
        </div>
    }
}
else
{
    <h2>Loading fork list...</h2>
}

@code {
    [Parameter]
    public string? GitHubToken { get; set; }
    
    private User? User { get; set; }
    private Repository[]? Forks { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ArgumentException.ThrowIfNullOrEmpty(GitHubToken);

        var setUserResult = await GitHubClient.GetUserInfo(GitHubToken)
            .ThenAsync<User, User, GitHubError>(result => User = result)
            .ThenAsync<User, Repository[], GitHubError>(async user => await GitHubClient.GetUserForks(user.Login, GitHubToken))
            .ThenAsync<Repository[], Unit, GitHubError>(repos =>
            {
                Forks = repos;
                return Unit.Instance;
            });

        if (setUserResult is Result<Unit, GitHubError>.Failure { Error: GitHubError.Unauthorized })
        {
            await JsRuntime.InvokeVoidAsync("clear_github_token");
        }
    }
}
