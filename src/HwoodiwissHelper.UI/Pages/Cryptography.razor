@page "/cryptography"
@using System.Security.Cryptography
@inject IJSRuntime JsRuntime

<PageTitle>Cryptography</PageTitle>

<h1>Cryptography</h1>

<p><i>Cryptography is the practice and study of techniques for secure communication in the presence of adversarial behavior</i></p>

<h2>Generate Cryptographically Random String</h2>

<div>
    <label for="bytes-length">Byte Length</label>
    <input class="form-control" id="bytes-length-txt" type="number" min="10" max="4096" @oninput="OnBytesLengthChanged" @bind="_bytesLengthText" />
    <input class="form-range" id="bytes-length" type="range" min="10" max="4096" @oninput="OnBytesLengthChanged" @bind="_bytesLengthSlider" />
    <textarea readonly id="encoded-crng-string" class="form-control" @bind="_randomString" @ref="_encodedStringOutput"></textarea>
</div>

<script>
    function fitTextAreaToContent(element) {
        element.style.height = "1px";
        element.style.height = (25+element.scrollHeight)+"px";
    }
</script>

@code {
    private int _bytesLengthText = 512;
    private int _bytesLengthSlider = 512;
    private string _randomString = GetNSecureBytes(512);
    ElementReference _encodedStringOutput;
    
    private async Task OnBytesLengthChanged(ChangeEventArgs args)
    {
        if (args is not { Value: string valueString } || !int.TryParse(valueString, out var value))
        {
            return;
        }

        _bytesLengthSlider = value;
        _bytesLengthText = value;
        _randomString = GetNSecureBytes(value);
        await Task.Delay(50);
        await JsRuntime.InvokeVoidAsync("fitTextAreaToContent", _encodedStringOutput);
    }

    private static string GetNSecureBytes(int bytes)
    {
        var buffer = new byte[bytes];
        RandomNumberGenerator.Fill(buffer);
        return Convert.ToBase64String(buffer);
    }
}
