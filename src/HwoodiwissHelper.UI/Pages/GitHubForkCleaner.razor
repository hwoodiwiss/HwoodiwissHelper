@page "/fork-cleaner"
@using System.Web
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@inject IWebAssemblyHostEnvironment HostEnvironment
@inject IJSRuntime JsRuntime

<PageTitle>Fork Cleaner</PageTitle>

<h1>Fork Cleaner</h1>

<p>Tired of having repo forks gather dust?</p>

@if (IsAuthenticated)
{
    <p>You can do authenticated things, yay.</p>
}
else
{
    <div class="row">
        <a href="@LoginUri">
            <button>Login With GitHub</button>
        </a>
    </div>
}

@code {

    private string? LoginUri { get; set; }

    private bool IsAuthenticated => GithubToken is not null;

    private string? GithubToken { get; set; }

    protected override async Task OnInitializedAsync()
    {
        GithubToken = await JsRuntime.InvokeAsync<string?>("get_github_token");

        var callbackUriQuery = HttpUtility.ParseQueryString(string.Empty);
        var loginUriQuery = HttpUtility.ParseQueryString(string.Empty);
        string loginUriBase = HostEnvironment.IsDevelopment()
            ? "http://localhost:8080"
            : HostEnvironment.BaseAddress;

        var callbackUriBuilder = new UriBuilder($"{loginUriBase}/github/login/callback");

        if (HostEnvironment.IsDevelopment())
        {
            callbackUriQuery.Add("redirectUri", "http://localhost:5238?pageLink=fork-cleaner");
            callbackUriBuilder.Query = callbackUriQuery.ToString();
            loginUriQuery.Add("redirectUri", callbackUriBuilder.Uri.ToString());
        }
        else
        {
            callbackUriQuery.Add("redirectUri", $"{HostEnvironment.BaseAddress}?pageLink=fork-cleaner");
            callbackUriBuilder.Query = callbackUriQuery.ToString();
            loginUriQuery.Add("redirectUri", callbackUriBuilder.Uri.ToString());
        }

        var loginUriBuilder = new UriBuilder($"{loginUriBase}/github/login");
        loginUriBuilder.Query = loginUriQuery.ToString();

        LoginUri = loginUriBuilder.ToString();

        await base.OnInitializedAsync();
    }
}
